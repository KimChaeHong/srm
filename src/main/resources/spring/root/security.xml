<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
	
	<!-- 시큐리티가 적용되지 않는 요청 경로를 설정 -->
	<security:http pattern="/resources/**" security="none" />

	<!-- 시큐리티 필터 체인을 구성 -->
	<!-- 브라우저의 id,pw를 받았을 때 로그인 할 것이냐 말것이냐의 기능 -->
	<security:http>
		<!-- 폼 인증 방식 선택 --><!-- loginform 파라미터 값을 가져옴 -->
		<security:form-login 
			login-page="/member/loginForm"
			username-parameter="mem_id" 
			password-parameter="mem_pw"
			login-processing-url="/login"
			authentication-success-handler-ref="authenticationSuccessHandler"
			authentication-failure-handler-ref="authenticationFailureHandler" />
		<!-- 로그 아웃 설정 -->
		<security:logout logout-url="/logout"
			success-handler-ref="logoutSuccessHandler" />

		<!-- 사이트간 요청 위조 방지 비활성화 -->
		<security:csrf disabled="true" />

		<!-- 권한이 불충분할 경우 이동할 경로 -->
		<!-- 로그인이 안되어 있을 경우 : 로그인 폼으로 이동 -->
		<!-- 현재 로그인 된 사용자가 권한 불충분 일 경우 이동할 경로 -->
		<security:access-denied-handler
			error-page="/security/error403" />

	</security:http>

	<!-- @Secured를 사용하기 위한 추가 설정 -->
	<security:global-method-security
		secured-annotations="enabled" />

	<bean id="authenticationSuccessHandler"
		class="com.birdie.srm.security.AuthenticationSuccessHandler" />

	<bean id="authenticationFailureHandler"
		class="com.birdie.srm.security.AuthenticationFailureHandler" />

	<bean id="logoutSuccessHandler"
		class="com.birdie.srm.security.LogoutSuccessHandler" />

	<!-- db에서 데이터를 가져와서 사용자가 보낸 값을 비교할 때 -->
	<security:authentication-manager>
		<security:authentication-provider
			ref="daoAuthenticationProvider" /><!-- DB에서 값을 읽고 spring security에게 제공 -->
	</security:authentication-manager>

	<bean id="daoAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="memberDetailService"/> 
		<property name="authoritiesMapper" ref="roleHierarchyAuthoritiesMapper"/>
	</bean>
	
	<bean id="roleHierarchyAuthoritiesMapper"
		class="org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper">
		<constructor-arg ref="roleHierarchyImpl" />
		<!-- 생성자 매개값으로 다시 만들어짐 -->
	</bean>

	<bean id="roleHierarchyImpl"
		class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
		<property name="hierarchy"> <!-- setter주입으로 string 매개값 한줄에 두가지 역할을 비교 -->
			<value>
				admi > deve
                deve > guser
			</value>
		</property>
	</bean>

</beans>
